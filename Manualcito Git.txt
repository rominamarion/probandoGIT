Git
1- Configuración inicial de Git:
-Abrir la consola y escribir git --version (para checkear la versión actual)
-git config --global (para que la configuración sea global y no por proyecto) user.name "Romina Marion"
-git config --global user.email rominaancaten@hotmail.com
2- Configuración del editor de texto:
-git config --global core.editor "code --wait"
-git config --global -e (aca se abre el editor, en este caso el VSCode)
-git config --global core.autocrlf true (para los saltos de línea, si es linux/mac en lugar de true se pone input)
-git config -h (listado de opciones para la configuración)
3- Comandos de GIT:
-ls (listado de carpetas o directorios)
-pwd (indica dónde nos encontramos)
-cd <directorio o carpeta> (para navegar por las carpetas o directorios)
-cd .. (pasa salir del directorio y volver a uno anterior o más arriba)
-mkdir <directorio nuevo> (para crear una nueva carpeta o directorio)
-git init (para inicializar un repositorio nuevo en Git. El .git indica que está oculto)
-ls -a (para poder ver archivos y directorios ocultos, como por ej .git)
-cd .git (para ubicarme en el directorio)
-ls -a (para ver todos los archivos que se utilizan en Git para poder gestionar los proyectos. Es un DETALLE DE IMPLEMENTACIÓN. Aquí se van a almacenar las distintas versiones, ramas y commits)
-code . (abre los archivos que se encuentran en la carpeta en la que estoy posicionado)
-git status (muestra el estado actual del repositorio)
-git add ("nombre del archivo","#.txt" SELECCIONA todos los archivos con esa extensión, "." SELECCIONA todos los archivos y los agrega a la etapa de stage)
-git add <nombre1> <nombre2> (para añadir 2 archivos, tienen que estar separados por un espacio)
-git commit -m "MENSAJE CON SENTIDO" (para "comprometer" el archivo. Lo saca de la fase de stage)
-git commit (otra forma de commitear, se pone un mensaje en la 1er línea del editor, se guarda y se cierra)
-rm <nombre del archivo> (para eliminar archivos. git add para agregarlos a la etapa de stage)
-git rm <nombre del archivo> (para eliminar archivos y agregarlos a stage)
-git restore --staged (para sacarlos de stage)
-git restore <nombre del archivo> (para restaurar archivo)
-mv <nombre del archivo> <nombre nuevo> (para mover o renombrar archivos)
-git mv <nombre del archivo> (para renombrar archivos y agregarlos a stage)
-crear archivo .gitignore en el VSCode (para ignorar archivos o carpetas)
-git status -s (otra forma de ver el estado de los archivos)
-git diff (para visualizar los cambios que se están por agregar a staged. Con "Q" salgo)
-git diff --staged (cambios en la etapa de staged)
-git log --oneline (muestra el historial de commits con un identificador junto al mensaje de los commits)
-git branch (para ver en que rama nos encontramos)
-